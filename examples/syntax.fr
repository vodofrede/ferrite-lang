# assignment
n = 42
greeting = "hello world"
truth = true

# text formatting
message = f"i say {greeting} to you!"
write(message)

# scopes
x = 5
do
    x = 10   # shadows the previous value of 'x'
    write(x) # prints 10
end
write(x)     # prints 5

# variables
var y = 1 # y is now variable
do
    y = 2
end
write(y) # prints 2

# control flow
is_valid = true
answer = 5
if is_valid and answer < 10 then 
    write("it was true")
else
    write("it was false")
end

# pattern matching
line = "hello"
reply = match line
    "hello" then "greetings"
    "goodbye" then "farewell"
    _ then "huh?"
end
write(reply)

# loops
var sum = 1
while sum < 10 do
    sum = sum + sum
end

for i in 1 to 10 do # ranges are open
    
end

# types
n: number = 42.0        # types are typically inferred from usage
str: text = "text_here" # but can be specified

# functions
function add(x: number, y: number)  # x and y need types, since otherwise the + operation isn't defined
    x + y                           # no return needed
end

# lists
list = [1, 2, 3]
second_element = list.2

texts = ["are", "you", "having", "a", "good", "day", "?"]
for text in texts do
    write(f"{text} ")
end

sum = list.sum()
write(sum) # prints 6

# tuples
result = (42, "life", true)

# structures
record message
    message: text,
    status_code: number,
    valid: bool
end

type token
    atom(text),
    op(text),
    eof
end

type id number

# traits
trait summary
    
end

# more literals
decimal     = 1_000.1
hex         = 0xffab
octal       = 0o77
binary      = 0b1010_0101
scientific  = 1.2e3

format   = f"number {n}, predicate {p}" # format string
iso_8601 = r"(\d{4})-(\d{2})-(\d{2})"   # compiled regex
c_string = c"some data string"          # contains null byte at the end

range = 1 to 5 # [1, 2, 3, 4, 5]
range_from = 1 to _  # [1, 2, 3...]
range_to = 
